
{# This jinga template for dnsdist.conf is autogenerated. Do NOT edit #}
{# See ~/systems/files/dnsdist/gen-dnsdist-conf-jinga.py #}
{% set os = ansible_facts['distribution'] %}
{% set os_ver = ansible_facts['distribution_version'] %}
{% set hname = inventory_hostname %}
{% set primary_ip = ansible_facts['all_ipv4_addresses'][0] %}
{% set secondary_ip = ansible_facts['all_ipv4_addresses'][0] %}
{% if dnsdist_testing[hname]  %}
{% set ext_ip = secondary_ip %}
{% set int_ip = primary_ip %}
{% else %}
{% set ext_ip = primary_ip %}
{% set int_ip = secondary_ip %}
{% endif %}
{% set pools = dnsdist_data[hname]['pools'] %}
    
-- Listen Sockets
setLocal("127.0.0.1:5353")
addLocal("{{ ext_ip }}:53")

-- Control Socket, Console and Webserver
controlSocket('127.0.0.1:5333')
setKey('QfhaEHPbEM+zPBR1tQe6K6pceGorSbqxZLoZtFrcPLw=')
setConsoleACL({'127.0.0.1/8', '128.100.56.128/27', '128.100.96.32/29', '128.100.102.0/23'})
webserver("{{ primary_ip }}:8088")
setWebserverConfig({password='John1717', apiKey='fichoo2Choh8', acl='128.100.102.0/23'})

-- Access Control Lists
setACLFromFile('/etc/dnsdist/global.acl')

-- Pools

{% for nm, ip in pools['default'].items() %}
newServer({ name='{{nm}}', address='{{ip}}', pool='' })
{% endfor %}

{% for nm, ip in pools['local'].items() %}
newServer({ name='{{nm}}', address='{{ip}}', pool='local' })
{% endfor %}
    
newServer({name='cira1', address='149.112.121.10', pool='cira'})
newServer({name='cira2', address='149.112.122.10', pool='cira'})
newServer({name='ans1', address='128.100.235.12', pool='bluecat'})
newServer({name='ans2', address='128.100.213.12', pool='bluecat'})
newServer({name='prod1', address='142.1.78.12', pool='azure_prod'})
newServer({name='prod2', address='142.1.78.13', pool='azure_prod'})
newServer({name='prod3', address='142.1.78.14', pool='azure_prod'})
newServer({name='prod4', address='142.1.78.15', pool='azure_prod'})
newServer({name='qa1', address='142.150.247.12', pool='azure_qa'})
newServer({name='qa2', address='142.150.247.13', pool='azure_qa'})
newServer({name='qa3', address='142.150.247.14', pool='azure_qa'})
newServer({name='qa4', address='142.150.247.15', pool='azure_qa'})
newServer({name='blackhole', address='128.100.100.130', pool='typo'})

-- Packet Caches
pc = newPacketCache(100000)
getPool(''):setCache(pc)

-- Dynamic Blocks
local dbr = dynBlockRulesGroup()
dbr:setQueryRate(60, 15, 'Exceeded query rate', 60)
dbr:setRCodeRate(DNSRCode.NXDOMAIN, 60, 15, 'Exceeded NXD rate', 60)
dbr:setRCodeRate(DNSRCode.SERVFAIL, 60, 15, 'Exceeded ServFail rate', 60)
dbr:setQTypeRate(DNSQType.ANY, 40, 15, 'Exceeded ANY rate', 60)
dbr:setResponseByteRate(40000, 15, 'Exceeded Byte rate', 60)

-- NetMask Groups
az_nmg = newNMG()
az_nmg:addMask('127.0.0.0/8')
az_nmg:addMask('128.100.56.128/27')
az_nmg:addMask('128.100.102.0/23')
az_nmg:addMask('128.100.67.64/29')
az_nmg:addMask('142.150.0.5/24')
az_nmg:addMask('10.11.12.13/32')
az_nmg:addMask('10.192.155.51/32')

-- Suffix Match Nodes
azure_priv_smn = newSuffixMatchNode()
azure_priv_smn:add('canadacentral.privatelink.datafactory.azure.net.')
azure_priv_smn:add('privatelink-global.wvd.microsoft.com.')
azure_priv_smn:add('privatelink.adf.azure.com.')
azure_priv_smn:add('privatelink.agentsvc.azure-automation.net.')
azure_priv_smn:add('privatelink.analysis.windows.net.')
azure_priv_smn:add('privatelink.api.azureml.ms.')
azure_priv_smn:add('privatelink.azconfig.io.')
azure_priv_smn:add('privatelink.azure-api.net.')
azure_priv_smn:add('privatelink.azure-automation.net.')
azure_priv_smn:add('privatelink.azure-devices-provisioning.net.')
azure_priv_smn:add('privatelink.azure-devices.net.')
azure_priv_smn:add('privatelink.azurecr.io.')
azure_priv_smn:add('privatelink.azuredatabricks.net.')
azure_priv_smn:add('privatelink.azurehdinsight.net.')
azure_priv_smn:add('privatelink.azurestaticapps.net.')
azure_priv_smn:add('privatelink.azuresynapse.net.')
azure_priv_smn:add('privatelink.azurewebsites.net.')
azure_priv_smn:add('privatelink.batch.azure.com.')
azure_priv_smn:add('privatelink.blob.core.windows.net.')
azure_priv_smn:add('privatelink.cassandra.cosmos.azure.com.')
azure_priv_smn:add('privatelink.cognitiveservices.azure.com.')
azure_priv_smn:add('privatelink.database.windows.net.')
azure_priv_smn:add('privatelink.datafactory.azure.net.')
azure_priv_smn:add('privatelink.dev.azuresynapse.net.')
azure_priv_smn:add('privatelink.dfs.core.windows.net.')
azure_priv_smn:add('privatelink.dicom.azurehealthcareapis.com.')
azure_priv_smn:add('privatelink.digitaltwins.azure.net.')
azure_priv_smn:add('privatelink.directline.botframework.com.')
azure_priv_smn:add('privatelink.documents.azure.com.')
azure_priv_smn:add('privatelink.eventgrid.azure.net.')
azure_priv_smn:add('privatelink.fhir.azurehealthcareapis.com.')
azure_priv_smn:add('privatelink.file.core.windows.net.')
azure_priv_smn:add('privatelink.gremlin.cosmos.azure.com.')
azure_priv_smn:add('privatelink.guestconfiguration.azure.com.')
azure_priv_smn:add('privatelink.his.arc.azure.com.')
azure_priv_smn:add('privatelink.kubernetesconfiguration.azure.com.')
azure_priv_smn:add('privatelink.managedhsm.azure.net.')
azure_priv_smn:add('privatelink.mariadb.database.azure.com.')
azure_priv_smn:add('privatelink.media.azure.net.')
azure_priv_smn:add('privatelink.mongo.cosmos.azure.com.')
azure_priv_smn:add('privatelink.monitor.azure.com.')
azure_priv_smn:add('privatelink.mysql.database.azure.com.')
azure_priv_smn:add('privatelink.notebooks.azure.net.')
azure_priv_smn:add('privatelink.ods.opinsights.azure.com.')
azure_priv_smn:add('privatelink.oms.opinsights.azure.com.')
azure_priv_smn:add('privatelink.openai.azure.com.')
azure_priv_smn:add('privatelink.pbidedicated.windows.net.')
azure_priv_smn:add('privatelink.postgres.database.azure.com.')
azure_priv_smn:add('privatelink.prod.migration.windowsazure.com.')
azure_priv_smn:add('privatelink.purview.azure.com.')
azure_priv_smn:add('privatelink.purviewstudio.azure.com.')
azure_priv_smn:add('privatelink.queue.core.windows.net.')
azure_priv_smn:add('privatelink.redis.cache.windows.net.')
azure_priv_smn:add('privatelink.redisenterprise.cache.azure.net.')
azure_priv_smn:add('privatelink.search.windows.net.')
azure_priv_smn:add('privatelink.service.signalr.net.')
azure_priv_smn:add('privatelink.servicebus.windows.net.')
azure_priv_smn:add('privatelink.siterecovery.windowsazure.com.')
azure_priv_smn:add('privatelink.sql.azuresynapse.net.')
azure_priv_smn:add('privatelink.table.core.windows.net.')
azure_priv_smn:add('privatelink.table.cosmos.azure.com.')
azure_priv_smn:add('privatelink.tip1.powerquery.microsoft.com.')
azure_priv_smn:add('privatelink.token.botframework.com.')
azure_priv_smn:add('privatelink.vaultcore.azure.net.')
azure_priv_smn:add('privatelink.web.core.windows.net.')
azure_priv_smn:add('privatelink.workspace.azurehealthcareapis.com.')
azure_priv_smn:add('privatelink.wvd.microsoft.com.')
azure_pub_smn = newSuffixMatchNode()
azure_pub_smn:add('adf.azure.com.')
azure_pub_smn:add('agentsvc.azure-automation.net.')
azure_pub_smn:add('analysis.windows.net.')
azure_pub_smn:add('api.azureml.ms.')
azure_pub_smn:add('azconfig.io.')
azure_pub_smn:add('aznbcontent.net.')
azure_pub_smn:add('azure-api.net.')
azure_pub_smn:add('azure-automation.net.')
azure_pub_smn:add('azure-devices-provisioning.net.')
azure_pub_smn:add('azure-devices.net.')
azure_pub_smn:add('azurecr.io.')
azure_pub_smn:add('azuredatabricks.net.')
azure_pub_smn:add('azurehdinsight.net.')
azure_pub_smn:add('azurestaticapps.net.')
azure_pub_smn:add('azuresynapse.net.')
azure_pub_smn:add('azurewebsites.net.')
azure_pub_smn:add('batch.azure.com.')
azure_pub_smn:add('blob.core.windows.net.')
azure_pub_smn:add('canadacentral.datafactory.azure.net.')
azure_pub_smn:add('cassandra.cosmos.azure.com.')
azure_pub_smn:add('cognitiveservices.azure.com.')
azure_pub_smn:add('database.windows.net.')
azure_pub_smn:add('datafactory.azure.net.')
azure_pub_smn:add('dev.azuresynapse.net.')
azure_pub_smn:add('dfs.core.windows.net.')
azure_pub_smn:add('dicom.azurehealthcareapis.com.')
azure_pub_smn:add('digitaltwins.azure.net.')
azure_pub_smn:add('directline.botframework.com.')
azure_pub_smn:add('documents.azure.com.')
azure_pub_smn:add('europe.directline.botframework.com.')
azure_pub_smn:add('europe.token.botframework.com.')
azure_pub_smn:add('eventgrid.azure.net.')
azure_pub_smn:add('fhir.azurehealthcareapis.com.')
azure_pub_smn:add('file.core.windows.net.')
azure_pub_smn:add('global.wvd.microsoft.com.')
azure_pub_smn:add('gremlin.cosmos.azure.com.')
azure_pub_smn:add('guestconfiguration.azure.com.')
azure_pub_smn:add('his.arc.azure.com.')
azure_pub_smn:add('inference.ml.azure.com.')
azure_pub_smn:add('instances.azureml.ms.')
azure_pub_smn:add('kubernetesconfiguration.azure.com.')
azure_pub_smn:add('managedhsm.azure.net.')
azure_pub_smn:add('mariadb.database.azure.com.')
azure_pub_smn:add('media.azure.net.')
azure_pub_smn:add('mongo.cosmos.azure.com.')
azure_pub_smn:add('monitor.azure.com.')
azure_pub_smn:add('mysql.database.azure.com.')
azure_pub_smn:add('notebooks.azure.net.')
azure_pub_smn:add('ods.opinsights.azure.com.')
azure_pub_smn:add('oms.opinsights.azure.com.')
azure_pub_smn:add('openai.azure.com.')
azure_pub_smn:add('pbidedicated.windows.net.')
azure_pub_smn:add('postgres.database.azure.com.')
azure_pub_smn:add('prod.migration.windowsazure.com.')
azure_pub_smn:add('purview.azure.com.')
azure_pub_smn:add('purviewstudio.azure.com.')
azure_pub_smn:add('queue.core.windows.net.')
azure_pub_smn:add('redis.cache.windows.net.')
azure_pub_smn:add('redisenterprise.cache.azure.net.')
azure_pub_smn:add('scm.azurewebsites.net.')
azure_pub_smn:add('search.windows.net.')
azure_pub_smn:add('service.signalr.net.')
azure_pub_smn:add('servicebus.windows.net.')
azure_pub_smn:add('siterecovery.windowsazure.com.')
azure_pub_smn:add('sql.azuresynapse.net.')
azure_pub_smn:add('table.core.windows.net.')
azure_pub_smn:add('table.cosmos.azure.com.')
azure_pub_smn:add('tip1.powerquery.microsoft.com.')
azure_pub_smn:add('token.botframework.com.')
azure_pub_smn:add('vault.azure.net.')
azure_pub_smn:add('vaultcore.azure.net.')
azure_pub_smn:add('web.core.windows.net.')
azure_pub_smn:add('workspace.azurehealthcareapis.com.')
azure_pub_smn:add('wvd.microsoft.com.')

local_smn = newSuffixMatchNode()
local_smn:add('toronto.edu.')
local_smn:add('univoftoronto.ca.')
local_smn:add('uoftoronto.ca.')
local_smn:add('uot.ca.')
local_smn:add('utm.ca.')
local_smn:add('utoronto.ca.')
local_smn:add('utoronto.com.')

arpa_smn = newSuffixMatchNode()
arpa_smn:add('0.10.in-addr.arpa.')
arpa_smn:add('0.32.10.in-addr.arpa.')
arpa_smn:add('100.128.in-addr.arpa.')
arpa_smn:add('11.10.in-addr.arpa.')
arpa_smn:add('111.168.192.in-addr.arpa.')
arpa_smn:add('1.142.in-addr.arpa.')
arpa_smn:add('12.10.in-addr.arpa.')
arpa_smn:add('129.211.205.in-addr.arpa.')
arpa_smn:add('131.82.192.in-addr.arpa.')
arpa_smn:add('1.32.10.in-addr.arpa.')
arpa_smn:add('150.142.in-addr.arpa.')
arpa_smn:add('151.142.in-addr.arpa.')
arpa_smn:add('175.12.192.in-addr.arpa.')
arpa_smn:add('176.12.192.in-addr.arpa.')
arpa_smn:add('177.12.192.in-addr.arpa.')
arpa_smn:add('177.75.192.in-addr.arpa.')
arpa_smn:add('178.12.192.in-addr.arpa.')
arpa_smn:add('179.12.192.in-addr.arpa.')
arpa_smn:add('180.12.192.in-addr.arpa.')
arpa_smn:add('181.12.192.in-addr.arpa.')
arpa_smn:add('182.12.192.in-addr.arpa.')
arpa_smn:add('183.12.192.in-addr.arpa.')
arpa_smn:add('19.10.in-addr.arpa.')
arpa_smn:add('192.10.in-addr.arpa.')
arpa_smn:add('207.139.192.in-addr.arpa.')
arpa_smn:add('214.168.192.in-addr.arpa.')
arpa_smn:add('2.168.192.in-addr.arpa.')
arpa_smn:add('253.142.in-addr.arpa.')
arpa_smn:add('254.75.192.in-addr.arpa.')
arpa_smn:add('3.10.in-addr.arpa.')
arpa_smn:add('31.212.199.in-addr.arpa.')
arpa_smn:add('3.168.192.in-addr.arpa.')
arpa_smn:add('4.10.in-addr.arpa.')
arpa_smn:add('5.10.in-addr.arpa.')
arpa_smn:add('51.138.in-addr.arpa.')
arpa_smn:add('6.10.in-addr.arpa.')
arpa_smn:add('64.100.in-addr.arpa.')
arpa_smn:add('65.100.in-addr.arpa.')
arpa_smn:add('66.100.in-addr.arpa.')
arpa_smn:add('96.100.in-addr.arpa.')
arpa_smn:add('7.10.in-addr.arpa.')
arpa_smn:add('73.139.192.in-addr.arpa.')
arpa_smn:add('8.10.in-addr.arpa.')
arpa_smn:add('9.10.in-addr.arpa.')
arpa_smn:add('96.168.192.in-addr.arpa.')

typo_smn = newSuffixMatchNode()
typo_smn:add('itoronto.ca.')
typo_smn:add('jtoronto.ca.')
typo_smn:add('uoronto.ca.')
typo_smn:add('urtoronto.ca.')
typo_smn:add('utornoto.ca.')
typo_smn:add('utornto.ca.')
typo_smn:add('utorono.ca.')
typo_smn:add('utoronot.ca.')
typo_smn:add('utoront.ca.')
typo_smn:add('utorotno.ca.')
typo_smn:add('utoroto.ca.')
typo_smn:add('utotonto.ca.')
typo_smn:add('utronto.ca.')
typo_smn:add('wwwutoronto.ca.')
typo_smn:add('ytoronto.ca.')

-- Regex Rules
-- public
ams_prefix = RegexRule('^[DQS]301AMD[A-Z0-9_-]+\\.')
prod_prefix = RegexRule('^[NP][0-9]{3}[A-Z0-9_-]+\\.')
qa_prefix = RegexRule('^[DQS][0-9]{3}[A-Z0-9_-]+\\.')

-- Selectors
azure_net_rule = NetmaskGroupRule(az_nmg)
local_name_rule = SuffixMatchNodeRule(local_smn)
arpa_rule = SuffixMatchNodeRule(arpa_smn)
typo_rule = SuffixMatchNodeRule(typo_smn)
azure_priv_name_rule = SuffixMatchNodeRule(azure_priv_smn)
azure_pub_name_rule = SuffixMatchNodeRule(azure_pub_smn)
prod_prefix_rule = OrRule({prod_prefix, ams_prefix})
azure_prefix_rule = OrRule({prod_prefix, qa_prefix})
prod_selector = AndRule({azure_net_rule, prod_prefix_rule, azure_priv_name_rule})
qa_selector = AndRule({azure_net_rule, qa_prefix, azure_priv_name_rule})
no_recurse_selector = AndRule({azure_net_rule, azure_prefix_rule, azure_pub_name_rule})

-- Actions
addAction(local_name_rule, PoolAction('local'))
addAction(arpa_rule, PoolAction('local'))
addAction(qa_selector, PoolAction('azure_qa'))
addAction(prod_selector, PoolAction('azure_prod'))
addAction(no_recurse_selector, PoolAction('local'))
addAction(typo_rule, PoolAction('typo'))
